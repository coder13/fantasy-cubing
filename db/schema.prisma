generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Competition {
  id        String   @id @default("") @db.VarChar(32)
  name      String   @default("") @db.VarChar(50)
  countryId String   @default("") @db.VarChar(50)
  startDate String
  endDate   String
  cancelled Boolean
  Results   Result[]

  unofficialResultsUpdatedAt DateTime?
  officialResultsUpdatedAt   DateTime?

  @@map("Competitions")
}

model Person {
  id        String   @id @default("") @db.VarChar(10)
  wcaUserId Int      @default(0) @db.Integer
  name      String   @db.VarChar(80)
  countryId String   @default("") @db.VarChar(50)
  gender    String?  @default("") @db.Char(1)
  avatar    String?
  Results   Result[]

  @@map("Persons")
}

model Result {
  competitionId         String  @default("") @db.VarChar(32)
  personId              String  @default("") @db.VarChar(10)
  personCountryId       String  @default("") @db.VarChar(50)
  eventId               String  @default("") @db.VarChar(6)
  roundTypeId           String  @default("") @db.Char(1)
  formatId              String  @default("") @db.Char(1)
  pos                   Int?    @default(0) @db.SmallInt
  best                  Int     @default(0)
  average               Int     @default(0)
  attempts              Int[]   @default([])
  regionalSingleRecord  String? @db.Char(3)
  regionalAverageRecord String? @db.Char(3)

  date   String
  week   Int
  year   Int
  points Int?   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  person      Person      @relation(fields: [personId], references: [id])
  competition Competition @relation(fields: [competitionId], references: [id])

  @@id([competitionId, eventId, roundTypeId, personId])
  @@map("Results")
}

model WcaLiveCompetition {
  wcaId     String @db.VarChar(32)
  wcaLiveId Int

  @@id([wcaId, wcaLiveId])
  @@map("WcaLiveCompetitions")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  email  String   @unique
  avatar String?
  Team   Team?
  roles  String[] @default([])
}

model Team {
  id     Int    @id @default(autoincrement())
  userId Int    @unique
  name   String @unique

  Picks Picks[]
  user  User    @relation(fields: [userId], references: [id])
}

model Picks {
  id      Int    @id @default(autoincrement())
  slot    Int
  teamId  Int
  week    Int
  year    Int
  wcaId   String
  eventId String
  points  Int?

  team Team @relation(fields: [teamId], references: [id])

  @@index([teamId, week, year, slot])
}
